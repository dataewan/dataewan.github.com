import{_ as n,a as t,b as a,c as s,i as e,s as o,d as c,S as p,f as i,t as r,e as l,j as u,k as h,l as k,g as f,h as d,m,n as y,o as g,p as E}from"./client.7c2d2abc.js";function v(n){var s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(n){return!1}}();return function(){var e,o=t(n);if(s){var c=t(this).constructor;e=Reflect.construct(o,arguments,c)}else e=o.apply(this,arguments);return a(this,e)}}function w(n){var t,a,s,e,o,c,p,v,w,b,C,P,D,x,j,I,O,H,R,T,_,A,M,N,L,S,Y,U,q,z,B,F,G,J,K,Q,V,W,X,Z,$,nn,tn,an,sn,en,on,cn,pn,rn,ln,un,hn,kn,fn,dn,mn,yn,gn,En,vn,wn,bn,Cn,Pn,Dn,xn,jn,In,On,Hn,Rn,Tn,_n,An,Mn,Nn,Ln,Sn,Yn,Un,qn,zn,Bn,Fn,Gn,Jn,Kn,Qn,Vn,Wn,Xn,Zn,$n,nt;return{c:function(){t=i("p"),a=i("a"),s=r("Poetry"),e=r(" makes packaging a Python application easy.\n"),o=i("a"),c=r("Click"),p=r(" makes it easy to create command line applications in Python.\nHow can these two tools be used together?"),v=l(),w=i("cite"),b=i("a"),C=r("kindlenotes2md"),P=l(),D=i("p"),x=r("I’ve used this pattern in the tool "),j=i("code"),I=r("kindlenotes2md"),O=r(" if you want to see a working example.\nHere I’m just going to talk about the most important points.\nI assume that you’ve already got a poetry project up and running,\neither by running "),H=i("code"),R=r("poetry new"),T=r(" to create a new project, or by "),_=i("code"),A=r("poetry init"),M=r(" in an existing one."),N=l(),L=i("p"),S=r("Now create a command line application from your code."),Y=l(),U=i("h1"),q=r("Make an entry point in your pyproject.toml"),z=l(),B=i("p"),F=r("Add a section in your "),G=i("code"),J=r("pyproject.toml"),K=r(" file."),Q=l(),V=i("pre"),W=l(),X=i("p"),Z=r("There are 4 important parts to this line."),$=l(),nn=i("p"),tn=i("code"),an=r("kindlenotes2md"),sn=r(" for the first time is the name of the executable script, so what you’ll be typing in on the command line."),en=l(),on=i("p"),cn=i("code"),pn=r("kindlenotes2md"),rn=r(" for the second time is the name of the module.\nThey don’t need to be called the same thing."),ln=l(),un=i("p"),hn=i("code"),kn=r("notes"),fn=r(" is the name of the python file in the module that contains the function that you’ll use as the entry point to your application."),dn=l(),mn=i("p"),yn=i("code"),gn=r("cli"),En=r(" is the name of the function that you’ll call when typing the command line."),vn=l(),wn=i("h1"),bn=r("Make the function for the command line application"),Cn=l(),Pn=i("p"),Dn=r("If I run "),xn=i("code"),jn=r("poetry shell"),In=r(" first to set a virtual environment up, the function "),On=i("code"),Hn=r("cli"),Rn=r(" will be run when I run "),Tn=i("code"),_n=r("kindlenotes2md"),An=r(" in my command line.\nTo make this useful, use click decorators to pass parameters into the function from the command line."),Mn=l(),Nn=i("pre"),Ln=l(),Sn=i("h1"),Yn=r("How to unit test?"),Un=l(),qn=i("aside"),zn=i("a"),Bn=r("Click testing"),Fn=l(),Gn=i("p"),Jn=r("Click provides the "),Kn=i("code"),Qn=r("CliRunner"),Vn=r(", which lets you run commands as command line scripts.\nYou use this in your "),Wn=i("code"),Xn=r("pytest"),Zn=r(" unit tests.\nThis test tests what happens if the file isn’t found (exit code 1), and when it runs successfully."),$n=l(),nt=i("pre"),this.h()},l:function(n){t=u(n,"P",{});var i=h(t);a=u(i,"A",{href:!0,rel:!0});var r=h(a);s=k(r,"Poetry"),r.forEach(f),e=k(i," makes packaging a Python application easy.\n"),o=u(i,"A",{href:!0,rel:!0});var l=h(o);c=k(l,"Click"),l.forEach(f),p=k(i," makes it easy to create command line applications in Python.\nHow can these two tools be used together?"),i.forEach(f),v=d(n),w=u(n,"CITE",{});var m=h(w);b=u(m,"A",{href:!0});var y=h(b);C=k(y,"kindlenotes2md"),y.forEach(f),m.forEach(f),P=d(n),D=u(n,"P",{});var g=h(D);x=k(g,"I’ve used this pattern in the tool "),j=u(g,"CODE",{});var E=h(j);I=k(E,"kindlenotes2md"),E.forEach(f),O=k(g," if you want to see a working example.\nHere I’m just going to talk about the most important points.\nI assume that you’ve already got a poetry project up and running,\neither by running "),H=u(g,"CODE",{});var tt=h(H);R=k(tt,"poetry new"),tt.forEach(f),T=k(g," to create a new project, or by "),_=u(g,"CODE",{});var at=h(_);A=k(at,"poetry init"),at.forEach(f),M=k(g," in an existing one."),g.forEach(f),N=d(n),L=u(n,"P",{});var st=h(L);S=k(st,"Now create a command line application from your code."),st.forEach(f),Y=d(n),U=u(n,"H1",{});var et=h(U);q=k(et,"Make an entry point in your pyproject.toml"),et.forEach(f),z=d(n),B=u(n,"P",{});var ot=h(B);F=k(ot,"Add a section in your "),G=u(ot,"CODE",{});var ct=h(G);J=k(ct,"pyproject.toml"),ct.forEach(f),K=k(ot," file."),ot.forEach(f),Q=d(n),V=u(n,"PRE",{class:!0}),h(V).forEach(f),W=d(n),X=u(n,"P",{});var pt=h(X);Z=k(pt,"There are 4 important parts to this line."),pt.forEach(f),$=d(n),nn=u(n,"P",{});var it=h(nn);tn=u(it,"CODE",{});var rt=h(tn);an=k(rt,"kindlenotes2md"),rt.forEach(f),sn=k(it," for the first time is the name of the executable script, so what you’ll be typing in on the command line."),it.forEach(f),en=d(n),on=u(n,"P",{});var lt=h(on);cn=u(lt,"CODE",{});var ut=h(cn);pn=k(ut,"kindlenotes2md"),ut.forEach(f),rn=k(lt," for the second time is the name of the module.\nThey don’t need to be called the same thing."),lt.forEach(f),ln=d(n),un=u(n,"P",{});var ht=h(un);hn=u(ht,"CODE",{});var kt=h(hn);kn=k(kt,"notes"),kt.forEach(f),fn=k(ht," is the name of the python file in the module that contains the function that you’ll use as the entry point to your application."),ht.forEach(f),dn=d(n),mn=u(n,"P",{});var ft=h(mn);yn=u(ft,"CODE",{});var dt=h(yn);gn=k(dt,"cli"),dt.forEach(f),En=k(ft," is the name of the function that you’ll call when typing the command line."),ft.forEach(f),vn=d(n),wn=u(n,"H1",{});var mt=h(wn);bn=k(mt,"Make the function for the command line application"),mt.forEach(f),Cn=d(n),Pn=u(n,"P",{});var yt=h(Pn);Dn=k(yt,"If I run "),xn=u(yt,"CODE",{});var gt=h(xn);jn=k(gt,"poetry shell"),gt.forEach(f),In=k(yt," first to set a virtual environment up, the function "),On=u(yt,"CODE",{});var Et=h(On);Hn=k(Et,"cli"),Et.forEach(f),Rn=k(yt," will be run when I run "),Tn=u(yt,"CODE",{});var vt=h(Tn);_n=k(vt,"kindlenotes2md"),vt.forEach(f),An=k(yt," in my command line.\nTo make this useful, use click decorators to pass parameters into the function from the command line."),yt.forEach(f),Mn=d(n),Nn=u(n,"PRE",{class:!0}),h(Nn).forEach(f),Ln=d(n),Sn=u(n,"H1",{});var wt=h(Sn);Yn=k(wt,"How to unit test?"),wt.forEach(f),Un=d(n),qn=u(n,"ASIDE",{});var bt=h(qn);zn=u(bt,"A",{href:!0});var Ct=h(zn);Bn=k(Ct,"Click testing"),Ct.forEach(f),bt.forEach(f),Fn=d(n),Gn=u(n,"P",{});var Pt=h(Gn);Jn=k(Pt,"Click provides the "),Kn=u(Pt,"CODE",{});var Dt=h(Kn);Qn=k(Dt,"CliRunner"),Dt.forEach(f),Vn=k(Pt,", which lets you run commands as command line scripts.\nYou use this in your "),Wn=u(Pt,"CODE",{});var xt=h(Wn);Xn=k(xt,"pytest"),xt.forEach(f),Zn=k(Pt," unit tests.\nThis test tests what happens if the file isn’t found (exit code 1), and when it runs successfully."),Pt.forEach(f),$n=d(n),nt=u(n,"PRE",{class:!0}),h(nt).forEach(f),this.h()},h:function(){m(a,"href","https://python-poetry.org/"),m(a,"rel","nofollow"),m(o,"href","https://click.palletsprojects.com/"),m(o,"rel","nofollow"),m(b,"href","https://github.com/dataewan/kindlenotes2md"),m(V,"class","language-toml"),m(Nn,"class","language-python"),m(zn,"href","https://click.palletsprojects.com/en/8.0.x/testing/"),m(nt,"class","language-python")},m:function(n,i){y(n,t,i),g(t,a),g(a,s),g(t,e),g(t,o),g(o,c),g(t,p),y(n,v,i),y(n,w,i),g(w,b),g(b,C),y(n,P,i),y(n,D,i),g(D,x),g(D,j),g(j,I),g(D,O),g(D,H),g(H,R),g(D,T),g(D,_),g(_,A),g(D,M),y(n,N,i),y(n,L,i),g(L,S),y(n,Y,i),y(n,U,i),g(U,q),y(n,z,i),y(n,B,i),g(B,F),g(B,G),g(G,J),g(B,K),y(n,Q,i),y(n,V,i),V.innerHTML='<code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">tool.poetry.scripts</span><span class="token punctuation">]</span>\n<span class="token key property">kindlenotes2md</span> <span class="token punctuation">=</span> <span class="token string">"kindlenotes2md.notes:cli"</span></code>',y(n,W,i),y(n,X,i),g(X,Z),y(n,$,i),y(n,nn,i),g(nn,tn),g(tn,an),g(nn,sn),y(n,en,i),y(n,on,i),g(on,cn),g(cn,pn),g(on,rn),y(n,ln,i),y(n,un,i),g(un,hn),g(hn,kn),g(un,fn),y(n,dn,i),y(n,mn,i),g(mn,yn),g(yn,gn),g(mn,En),y(n,vn,i),y(n,wn,i),g(wn,bn),y(n,Cn,i),y(n,Pn,i),g(Pn,Dn),g(Pn,xn),g(xn,jn),g(Pn,In),g(Pn,On),g(On,Hn),g(Pn,Rn),g(Pn,Tn),g(Tn,_n),g(Pn,An),y(n,Mn,i),y(n,Nn,i),Nn.innerHTML='<code class="language-python"><span class="token keyword">import</span> click\n\n<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>argument</span><span class="token punctuation">(</span><span class="token string">"inputfilename"</span><span class="token punctuation">)</span>\n<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">"-o"</span><span class="token punctuation">,</span> <span class="token string">"--outfilename"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>\n<span class="token keyword">def</span> <span class="token function">cli</span><span class="token punctuation">(</span>inputfilename<span class="token punctuation">,</span> outfilename<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    checkfile<span class="token punctuation">(</span>inputfilename<span class="token punctuation">)</span>\n    contents <span class="token operator">=</span> read_file<span class="token punctuation">(</span>inputfilename<span class="token punctuation">)</span>\n    book_notes <span class="token operator">=</span> parse_contents<span class="token punctuation">(</span>contents<span class="token punctuation">)</span>\n    markdown <span class="token operator">=</span> md_output<span class="token punctuation">(</span>book<span class="token operator">=</span>book_notes<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> outfilename <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>markdown<span class="token punctuation">)</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        save_to_file<span class="token punctuation">(</span>markdown<span class="token punctuation">,</span> outfilename<span class="token punctuation">)</span></code>',y(n,Ln,i),y(n,Sn,i),g(Sn,Yn),y(n,Un,i),y(n,qn,i),g(qn,zn),g(zn,Bn),y(n,Fn,i),y(n,Gn,i),g(Gn,Jn),g(Gn,Kn),g(Kn,Qn),g(Gn,Vn),g(Gn,Wn),g(Wn,Xn),g(Gn,Zn),y(n,$n,i),y(n,nt,i),nt.innerHTML='<code class="language-python"><span class="token keyword">from</span> click<span class="token punctuation">.</span>testing <span class="token keyword">import</span> CliRunner\n\n<span class="token keyword">from</span> kindlenotes2md <span class="token keyword">import</span> notes\n\n<span class="token keyword">def</span> <span class="token function">test_cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    runner <span class="token operator">=</span> CliRunner<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    result <span class="token operator">=</span> runner<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span>notes<span class="token punctuation">.</span>cli<span class="token punctuation">,</span> <span class="token string">"notexist.html"</span><span class="token punctuation">)</span>\n    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>exit_code <span class="token operator">==</span> <span class="token number">1</span>\n    result <span class="token operator">=</span> runner<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span>notes<span class="token punctuation">.</span>cli<span class="token punctuation">,</span> <span class="token string">"tests/test_data.html"</span><span class="token punctuation">)</span>\n    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>exit_code <span class="token operator">==</span> <span class="token number">0</span></code>'},p:E,i:E,o:E,d:function(n){n&&f(t),n&&f(v),n&&f(w),n&&f(P),n&&f(D),n&&f(N),n&&f(L),n&&f(Y),n&&f(U),n&&f(z),n&&f(B),n&&f(Q),n&&f(V),n&&f(W),n&&f(X),n&&f($),n&&f(nn),n&&f(en),n&&f(on),n&&f(ln),n&&f(un),n&&f(dn),n&&f(mn),n&&f(vn),n&&f(wn),n&&f(Cn),n&&f(Pn),n&&f(Mn),n&&f(Nn),n&&f(Ln),n&&f(Sn),n&&f(Un),n&&f(qn),n&&f(Fn),n&&f(Gn),n&&f($n),n&&f(nt)}}}var b={title:"Using Poetry and Click to create a command line application",summary:"Poetry and Click work together to create easy command line applications.",tags:["poetry python"]},C=function(t){n(i,p);var a=v(i);function i(n){var t;return s(this,i),t=a.call(this),e(c(t),n,null,w,o,{}),t}return i}();export default C;export{b as metadata};
