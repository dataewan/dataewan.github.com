import{S as n,i as a,s as t,e as s,t as e,a as o,b as p,f as c,g as i,d as r,c as l,h as u,j as h,k,n as d}from"./client.66b62f9b.js";function m(n){let a,t,m,f,y,g,E,w,v,b,C,P,x,j,D,I,O,H,T,_,A,M,R,N,L,S,Y,U,q,z,B,F,G,J,K,Q,V,W,X,Z,$,nn,an,tn,sn,en,on,pn,cn,rn,ln,un,hn,kn,dn,mn,fn,yn,gn,En,wn,vn,bn,Cn,Pn,xn,jn,Dn,In,On,Hn,Tn,_n,An,Mn,Rn,Nn,Ln,Sn,Yn,Un,qn,zn,Bn,Fn,Gn,Jn,Kn,Qn,Vn,Wn,Xn,Zn,$n,na;return{c(){a=s("p"),t=s("a"),m=e("Poetry"),f=e(" makes packaging a Python application easy.\n"),y=s("a"),g=e("Click"),E=e(" makes it easy to create command line applications in Python.\nHow can these two tools be used together?"),w=o(),v=s("cite"),b=s("a"),C=e("kindlenotes2md"),P=o(),x=s("p"),j=e("I’ve used this pattern in the tool "),D=s("code"),I=e("kindlenotes2md"),O=e(" if you want to see a working example.\nHere I’m just going to talk about the most important points.\nI assume that you’ve already got a poetry project up and running,\neither by running "),H=s("code"),T=e("poetry new"),_=e(" to create a new project, or by "),A=s("code"),M=e("poetry init"),R=e(" in an existing one."),N=o(),L=s("p"),S=e("Now create a command line application from your code."),Y=o(),U=s("h1"),q=e("Make an entry point in your pyproject.toml"),z=o(),B=s("p"),F=e("Add a section in your "),G=s("code"),J=e("pyproject.toml"),K=e(" file."),Q=o(),V=s("pre"),W=o(),X=s("p"),Z=e("There are 4 important parts to this line."),$=o(),nn=s("p"),an=s("code"),tn=e("kindlenotes2md"),sn=e(" for the first time is the name of the executable script, so what you’ll be typing in on the command line."),en=o(),on=s("p"),pn=s("code"),cn=e("kindlenotes2md"),rn=e(" for the second time is the name of the module.\nThey don’t need to be called the same thing."),ln=o(),un=s("p"),hn=s("code"),kn=e("notes"),dn=e(" is the name of the python file in the module that contains the function that you’ll use as the entry point to your application."),mn=o(),fn=s("p"),yn=s("code"),gn=e("cli"),En=e(" is the name of the function that you’ll call when typing the command line."),wn=o(),vn=s("h1"),bn=e("Make the function for the command line application"),Cn=o(),Pn=s("p"),xn=e("If I run "),jn=s("code"),Dn=e("poetry shell"),In=e(" first to set a virtual environment up, the function "),On=s("code"),Hn=e("cli"),Tn=e(" will be run when I run "),_n=s("code"),An=e("kindlenotes2md"),Mn=e(" in my command line.\nTo make this useful, use click decorators to pass parameters into the function from the command line."),Rn=o(),Nn=s("pre"),Ln=o(),Sn=s("h1"),Yn=e("How to unit test?"),Un=o(),qn=s("aside"),zn=s("a"),Bn=e("Click testing"),Fn=o(),Gn=s("p"),Jn=e("Click provides the "),Kn=s("code"),Qn=e("CliRunner"),Vn=e(", which lets you run commands as command line scripts.\nYou use this in your "),Wn=s("code"),Xn=e("pytest"),Zn=e(" unit tests.\nThis test tests what happens if the file isn’t found (exit code 1), and when it runs successfully."),$n=o(),na=s("pre"),this.h()},l(n){a=p(n,"P",{});var s=c(a);t=p(s,"A",{href:!0,rel:!0});var e=c(t);m=i(e,"Poetry"),e.forEach(r),f=i(s," makes packaging a Python application easy.\n"),y=p(s,"A",{href:!0,rel:!0});var o=c(y);g=i(o,"Click"),o.forEach(r),E=i(s," makes it easy to create command line applications in Python.\nHow can these two tools be used together?"),s.forEach(r),w=l(n),v=p(n,"CITE",{});var u=c(v);b=p(u,"A",{href:!0});var h=c(b);C=i(h,"kindlenotes2md"),h.forEach(r),u.forEach(r),P=l(n),x=p(n,"P",{});var k=c(x);j=i(k,"I’ve used this pattern in the tool "),D=p(k,"CODE",{});var d=c(D);I=i(d,"kindlenotes2md"),d.forEach(r),O=i(k," if you want to see a working example.\nHere I’m just going to talk about the most important points.\nI assume that you’ve already got a poetry project up and running,\neither by running "),H=p(k,"CODE",{});var aa=c(H);T=i(aa,"poetry new"),aa.forEach(r),_=i(k," to create a new project, or by "),A=p(k,"CODE",{});var ta=c(A);M=i(ta,"poetry init"),ta.forEach(r),R=i(k," in an existing one."),k.forEach(r),N=l(n),L=p(n,"P",{});var sa=c(L);S=i(sa,"Now create a command line application from your code."),sa.forEach(r),Y=l(n),U=p(n,"H1",{});var ea=c(U);q=i(ea,"Make an entry point in your pyproject.toml"),ea.forEach(r),z=l(n),B=p(n,"P",{});var oa=c(B);F=i(oa,"Add a section in your "),G=p(oa,"CODE",{});var pa=c(G);J=i(pa,"pyproject.toml"),pa.forEach(r),K=i(oa," file."),oa.forEach(r),Q=l(n),V=p(n,"PRE",{class:!0}),c(V).forEach(r),W=l(n),X=p(n,"P",{});var ca=c(X);Z=i(ca,"There are 4 important parts to this line."),ca.forEach(r),$=l(n),nn=p(n,"P",{});var ia=c(nn);an=p(ia,"CODE",{});var ra=c(an);tn=i(ra,"kindlenotes2md"),ra.forEach(r),sn=i(ia," for the first time is the name of the executable script, so what you’ll be typing in on the command line."),ia.forEach(r),en=l(n),on=p(n,"P",{});var la=c(on);pn=p(la,"CODE",{});var ua=c(pn);cn=i(ua,"kindlenotes2md"),ua.forEach(r),rn=i(la," for the second time is the name of the module.\nThey don’t need to be called the same thing."),la.forEach(r),ln=l(n),un=p(n,"P",{});var ha=c(un);hn=p(ha,"CODE",{});var ka=c(hn);kn=i(ka,"notes"),ka.forEach(r),dn=i(ha," is the name of the python file in the module that contains the function that you’ll use as the entry point to your application."),ha.forEach(r),mn=l(n),fn=p(n,"P",{});var da=c(fn);yn=p(da,"CODE",{});var ma=c(yn);gn=i(ma,"cli"),ma.forEach(r),En=i(da," is the name of the function that you’ll call when typing the command line."),da.forEach(r),wn=l(n),vn=p(n,"H1",{});var fa=c(vn);bn=i(fa,"Make the function for the command line application"),fa.forEach(r),Cn=l(n),Pn=p(n,"P",{});var ya=c(Pn);xn=i(ya,"If I run "),jn=p(ya,"CODE",{});var ga=c(jn);Dn=i(ga,"poetry shell"),ga.forEach(r),In=i(ya," first to set a virtual environment up, the function "),On=p(ya,"CODE",{});var Ea=c(On);Hn=i(Ea,"cli"),Ea.forEach(r),Tn=i(ya," will be run when I run "),_n=p(ya,"CODE",{});var wa=c(_n);An=i(wa,"kindlenotes2md"),wa.forEach(r),Mn=i(ya," in my command line.\nTo make this useful, use click decorators to pass parameters into the function from the command line."),ya.forEach(r),Rn=l(n),Nn=p(n,"PRE",{class:!0}),c(Nn).forEach(r),Ln=l(n),Sn=p(n,"H1",{});var va=c(Sn);Yn=i(va,"How to unit test?"),va.forEach(r),Un=l(n),qn=p(n,"ASIDE",{});var ba=c(qn);zn=p(ba,"A",{href:!0});var Ca=c(zn);Bn=i(Ca,"Click testing"),Ca.forEach(r),ba.forEach(r),Fn=l(n),Gn=p(n,"P",{});var Pa=c(Gn);Jn=i(Pa,"Click provides the "),Kn=p(Pa,"CODE",{});var xa=c(Kn);Qn=i(xa,"CliRunner"),xa.forEach(r),Vn=i(Pa,", which lets you run commands as command line scripts.\nYou use this in your "),Wn=p(Pa,"CODE",{});var ja=c(Wn);Xn=i(ja,"pytest"),ja.forEach(r),Zn=i(Pa," unit tests.\nThis test tests what happens if the file isn’t found (exit code 1), and when it runs successfully."),Pa.forEach(r),$n=l(n),na=p(n,"PRE",{class:!0}),c(na).forEach(r),this.h()},h(){u(t,"href","https://python-poetry.org/"),u(t,"rel","nofollow"),u(y,"href","https://click.palletsprojects.com/"),u(y,"rel","nofollow"),u(b,"href","https://github.com/dataewan/kindlenotes2md"),u(V,"class","language-toml"),u(Nn,"class","language-python"),u(zn,"href","https://click.palletsprojects.com/en/8.0.x/testing/"),u(na,"class","language-python")},m(n,s){h(n,a,s),k(a,t),k(t,m),k(a,f),k(a,y),k(y,g),k(a,E),h(n,w,s),h(n,v,s),k(v,b),k(b,C),h(n,P,s),h(n,x,s),k(x,j),k(x,D),k(D,I),k(x,O),k(x,H),k(H,T),k(x,_),k(x,A),k(A,M),k(x,R),h(n,N,s),h(n,L,s),k(L,S),h(n,Y,s),h(n,U,s),k(U,q),h(n,z,s),h(n,B,s),k(B,F),k(B,G),k(G,J),k(B,K),h(n,Q,s),h(n,V,s),V.innerHTML='<code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">tool.poetry.scripts</span><span class="token punctuation">]</span>\n<span class="token key property">kindlenotes2md</span> <span class="token punctuation">=</span> <span class="token string">"kindlenotes2md.notes:cli"</span></code>',h(n,W,s),h(n,X,s),k(X,Z),h(n,$,s),h(n,nn,s),k(nn,an),k(an,tn),k(nn,sn),h(n,en,s),h(n,on,s),k(on,pn),k(pn,cn),k(on,rn),h(n,ln,s),h(n,un,s),k(un,hn),k(hn,kn),k(un,dn),h(n,mn,s),h(n,fn,s),k(fn,yn),k(yn,gn),k(fn,En),h(n,wn,s),h(n,vn,s),k(vn,bn),h(n,Cn,s),h(n,Pn,s),k(Pn,xn),k(Pn,jn),k(jn,Dn),k(Pn,In),k(Pn,On),k(On,Hn),k(Pn,Tn),k(Pn,_n),k(_n,An),k(Pn,Mn),h(n,Rn,s),h(n,Nn,s),Nn.innerHTML='<code class="language-python"><span class="token keyword">import</span> click\n\n<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>argument</span><span class="token punctuation">(</span><span class="token string">"inputfilename"</span><span class="token punctuation">)</span>\n<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">"-o"</span><span class="token punctuation">,</span> <span class="token string">"--outfilename"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>\n<span class="token keyword">def</span> <span class="token function">cli</span><span class="token punctuation">(</span>inputfilename<span class="token punctuation">,</span> outfilename<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    checkfile<span class="token punctuation">(</span>inputfilename<span class="token punctuation">)</span>\n    contents <span class="token operator">=</span> read_file<span class="token punctuation">(</span>inputfilename<span class="token punctuation">)</span>\n    book_notes <span class="token operator">=</span> parse_contents<span class="token punctuation">(</span>contents<span class="token punctuation">)</span>\n    markdown <span class="token operator">=</span> md_output<span class="token punctuation">(</span>book<span class="token operator">=</span>book_notes<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> outfilename <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>markdown<span class="token punctuation">)</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        save_to_file<span class="token punctuation">(</span>markdown<span class="token punctuation">,</span> outfilename<span class="token punctuation">)</span></code>',h(n,Ln,s),h(n,Sn,s),k(Sn,Yn),h(n,Un,s),h(n,qn,s),k(qn,zn),k(zn,Bn),h(n,Fn,s),h(n,Gn,s),k(Gn,Jn),k(Gn,Kn),k(Kn,Qn),k(Gn,Vn),k(Gn,Wn),k(Wn,Xn),k(Gn,Zn),h(n,$n,s),h(n,na,s),na.innerHTML='<code class="language-python"><span class="token keyword">from</span> click<span class="token punctuation">.</span>testing <span class="token keyword">import</span> CliRunner\n\n<span class="token keyword">from</span> kindlenotes2md <span class="token keyword">import</span> notes\n\n<span class="token keyword">def</span> <span class="token function">test_cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    runner <span class="token operator">=</span> CliRunner<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    result <span class="token operator">=</span> runner<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span>notes<span class="token punctuation">.</span>cli<span class="token punctuation">,</span> <span class="token string">"notexist.html"</span><span class="token punctuation">)</span>\n    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>exit_code <span class="token operator">==</span> <span class="token number">1</span>\n    result <span class="token operator">=</span> runner<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span>notes<span class="token punctuation">.</span>cli<span class="token punctuation">,</span> <span class="token string">"tests/test_data.html"</span><span class="token punctuation">)</span>\n    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>exit_code <span class="token operator">==</span> <span class="token number">0</span></code>'},p:d,i:d,o:d,d(n){n&&r(a),n&&r(w),n&&r(v),n&&r(P),n&&r(x),n&&r(N),n&&r(L),n&&r(Y),n&&r(U),n&&r(z),n&&r(B),n&&r(Q),n&&r(V),n&&r(W),n&&r(X),n&&r($),n&&r(nn),n&&r(en),n&&r(on),n&&r(ln),n&&r(un),n&&r(mn),n&&r(fn),n&&r(wn),n&&r(vn),n&&r(Cn),n&&r(Pn),n&&r(Rn),n&&r(Nn),n&&r(Ln),n&&r(Sn),n&&r(Un),n&&r(qn),n&&r(Fn),n&&r(Gn),n&&r($n),n&&r(na)}}}const f={title:"Using Poetry and Click to create a command line application",summary:"Poetry and Click work together to create easy command line applications.",tags:["poetry python"]};export default class extends n{constructor(n){super(),a(this,n,null,m,t,{})}}export{f as metadata};
