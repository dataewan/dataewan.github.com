---
title: Using d3 components
tags:
    - components
    - d3
    - introduction
date: 2021-03-06
---

One thing that's exciting about svelte over other frameworks is that there's no [virtual DOM](https://reactjs.org/docs/faq-internals.html) to deal with.
This means it should be easier to use libraries like [d3](https://d3js.org/) for data visualisation.
It wasn't possible for me to create a reactive, animated force directed chart in react for example.

# References

I've found a few good references on how to make these sorts of interactive visualisation components.

[Matthias Stahl](https://www.youtube.com/watch?v=bnd64ZrHC0U) has a nice talk about using d3 and svelte for what each of them are good at.

| Svelte | d3   |
| --- | --- |
| DOM manipulation | Scales |
| Component style | Shapes | 
| Actions |  Interpolations |
| Transitions | |


[Amelia Wattenberger's svelte recipes site](https://svelte.recipes/) is brilliant.

There's also the [pancake](https://github.com/Rich-Harris/pancake) library from the maker of svelte.
It tries to make interactive charts that don't need javascript.
It doesn't use d3 but takes some inspiration from that library.

So there are lots of different ways to create these components.

# Examples


## Reactive component
<script>
import ReactiveComponent from "./ReactiveComponent.svelte"
let rawdata = "2\n3\n54"

import CanvasComponent from "./CanvasComponent.svelte"
let numNodes=200
</script>

I've got a `textarea` here with the value bound to `rawdata`.

<div>
<textarea rows="5" bind:value={rawdata} />
</div>

Adding new numbers here, or deleting numbers, causes updates in the chart below.
The `rawdata` is passed into `ReactiveComponent` as props,
which has a lot of [reactive declarations](https://svelte.dev/tutorial/reactive-declarations) for things like the d3 linear scales for x and y.
Then a svelte `each` block draws a svg rectangle for each of the datapoints.
I've also put a svelte transition in as well.

<ReactiveComponent rawdata={rawdata} /> 

## Drawing on the canvas

You can also use components that draw on the canvas.
Useful for performance reasons.


<CanvasComponent numNodes={numNodes}/>



----

Next: [Styling the blog](blog/styling)
